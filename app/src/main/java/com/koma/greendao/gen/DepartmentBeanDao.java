package com.koma.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import me.skyrim.charthelp.dao.DepartmentBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEPARTMENT_BEAN".
*/
public class DepartmentBeanDao extends AbstractDao<DepartmentBean, Long> {

    public static final String TABLENAME = "DEPARTMENT_BEAN";

    /**
     * Properties of entity DepartmentBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property DepartmentName = new Property(1, String.class, "departmentName", false, "DEPARTMENT_NAME");
        public final static Property DepartmentTotalPrice = new Property(2, float.class, "departmentTotalPrice", false, "DEPARTMENT_TOTAL_PRICE");
    }

    private DaoSession daoSession;


    public DepartmentBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DepartmentBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEPARTMENT_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"DEPARTMENT_NAME\" TEXT," + // 1: departmentName
                "\"DEPARTMENT_TOTAL_PRICE\" REAL NOT NULL );"); // 2: departmentTotalPrice
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEPARTMENT_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DepartmentBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String departmentName = entity.getDepartmentName();
        if (departmentName != null) {
            stmt.bindString(2, departmentName);
        }
        stmt.bindDouble(3, entity.getDepartmentTotalPrice());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DepartmentBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String departmentName = entity.getDepartmentName();
        if (departmentName != null) {
            stmt.bindString(2, departmentName);
        }
        stmt.bindDouble(3, entity.getDepartmentTotalPrice());
    }

    @Override
    protected final void attachEntity(DepartmentBean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public DepartmentBean readEntity(Cursor cursor, int offset) {
        DepartmentBean entity = new DepartmentBean( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // departmentName
            cursor.getFloat(offset + 2) // departmentTotalPrice
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DepartmentBean entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setDepartmentName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDepartmentTotalPrice(cursor.getFloat(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DepartmentBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DepartmentBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DepartmentBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
