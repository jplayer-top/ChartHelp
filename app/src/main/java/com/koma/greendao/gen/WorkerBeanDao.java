package com.koma.greendao.gen;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import me.skyrim.charthelp.dao.WorkerBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WORKER_BEAN".
*/
public class WorkerBeanDao extends AbstractDao<WorkerBean, Long> {

    public static final String TABLENAME = "WORKER_BEAN";

    /**
     * Properties of entity WorkerBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property WorkerId = new Property(1, long.class, "workerId", false, "WORKER_ID");
        public final static Property DepartmentId = new Property(2, long.class, "departmentId", false, "DEPARTMENT_ID");
        public final static Property WorkerName = new Property(3, String.class, "workerName", false, "WORKER_NAME");
        public final static Property TotalPrice = new Property(4, float.class, "totalPrice", false, "TOTAL_PRICE");
    }

    private DaoSession daoSession;

    private Query<WorkerBean> departmentBean_WorkerBeenQuery;

    public WorkerBeanDao(DaoConfig config) {
        super(config);
    }
    
    public WorkerBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WORKER_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"WORKER_ID\" INTEGER NOT NULL ," + // 1: workerId
                "\"DEPARTMENT_ID\" INTEGER NOT NULL ," + // 2: departmentId
                "\"WORKER_NAME\" TEXT," + // 3: workerName
                "\"TOTAL_PRICE\" REAL NOT NULL );"); // 4: totalPrice
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WORKER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WorkerBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getWorkerId());
        stmt.bindLong(3, entity.getDepartmentId());
 
        String workerName = entity.getWorkerName();
        if (workerName != null) {
            stmt.bindString(4, workerName);
        }
        stmt.bindDouble(5, entity.getTotalPrice());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WorkerBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getWorkerId());
        stmt.bindLong(3, entity.getDepartmentId());
 
        String workerName = entity.getWorkerName();
        if (workerName != null) {
            stmt.bindString(4, workerName);
        }
        stmt.bindDouble(5, entity.getTotalPrice());
    }

    @Override
    protected final void attachEntity(WorkerBean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public WorkerBean readEntity(Cursor cursor, int offset) {
        WorkerBean entity = new WorkerBean( //
            cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // workerId
            cursor.getLong(offset + 2), // departmentId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // workerName
            cursor.getFloat(offset + 4) // totalPrice
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WorkerBean entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setWorkerId(cursor.getLong(offset + 1));
        entity.setDepartmentId(cursor.getLong(offset + 2));
        entity.setWorkerName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTotalPrice(cursor.getFloat(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WorkerBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WorkerBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WorkerBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "workerBeen" to-many relationship of DepartmentBean. */
    public List<WorkerBean> _queryDepartmentBean_WorkerBeen(long departmentId) {
        synchronized (this) {
            if (departmentBean_WorkerBeenQuery == null) {
                QueryBuilder<WorkerBean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.DepartmentId.eq(null));
                departmentBean_WorkerBeenQuery = queryBuilder.build();
            }
        }
        Query<WorkerBean> query = departmentBean_WorkerBeenQuery.forCurrentThread();
        query.setParameter(0, departmentId);
        return query.list();
    }

}
